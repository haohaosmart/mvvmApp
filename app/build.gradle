plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.wanghao.mvvmapp"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }

    buildFeatures {
        compose = true // 启用 JetPack Compose组件特性
        viewBinding = true // 启用 ViewBinding
    }

    signingConfigs {
        config {
            storeFile file("android.keystore")
            storePassword "19910622"
            keyAlias "android.keystore"
            keyPassword "19910622"
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config //for debug
            ndk {
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
            }
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config //for relase
        }
    }


    // compose 编译相关配置
    composeOptions {
        kotlinCompilerVersion "1.5.10"
        kotlinCompilerExtensionVersion "1.0.0"
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.activity:activity-ktx:1.4.0'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    // 携程相关
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.6.20"


    // viewModel  liveData  lifeCycle  navigation相关
    // --ktx的区别参考  https://www.jianshu.com/p/ac28872349dd
    // viewmodel-ktx是ViewModel的KTX扩展库，可以让我们在ViewModel中方便的使用Coroutine
    // ViewModel KTX 库提供了一个 viewModelScope() 函数，
    // 可让您更轻松地从 ViewModel 启动协程。CoroutineScope 绑定至 Dispatchers.Main，
    // 并且会在清除 ViewModel 后自动取消。您可以使用 viewModelScope()，而无需为每个 ViewModel 创建一个新范围。

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    // 通过builder的方式创建liveData  具体区别参考 https://blog.csdn.net/vitaviva/article/details/104866124
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.4.1"
    //noinspection LifecycleAnnotationProcessorWithJava8
    implementation "androidx.lifecycle:lifecycle-compiler:2.4.1"
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.2"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.2"
    // retrofit okhttp相关
    implementation "com.squareup.okhttp3:okhttp:4.9.1"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    releaseImplementation "com.readystatesoftware.chuck:library:1.1.0"
    debugImplementation "com.readystatesoftware.chuck:library-no-op:1.1.0"
    implementation "com.google.guava:guava:27.0.1-android"
    implementation "com.tencent:mmkv:1.2.7"

    // compose 相关依赖
    def compose_version = "1.1.1"
    //suppressKotlinVersionCompatibilityCheck
//    implementation "androidx.ui:ui-tooling:1.0.0-beta08"
    implementation "androidx.compose.ui:ui-tooling:1.0.0-beta08"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.compose.runtime:runtime-rxjava2:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.navigation:navigation-compose:2.4.2"

    def compose_constraint = "1.0.0"
    implementation "androidx.constraintlayout:constraintlayout-compose:$compose_constraint"

    def compose_activity = "1.4.0"
    implementation "androidx.activity:activity-compose:$compose_activity"

    // compose用的网络加载图片库
    implementation "io.coil-kt:coil-compose:2.0.0-rc03"

    //Paging 3.0
    implementation 'androidx.paging:paging-compose:1.0.0-alpha14'
    implementation "androidx.paging:paging-runtime-ktx:3.1.1"

    implementation "com.woong:ResultBack:1.0.0"
    implementation "com.google.accompanist:accompanist-permissions:0.16.1"

    // 下拉刷新
    implementation "com.google.accompanist:accompanist-swiperefresh:0.16.1"

    // 沉浸式状态栏
    implementation "com.jaeger.statusbarutil:library:1.5.1"
}